@implements IDisposable
@inject DetectThemeHelper DetectThemeHelper

<ThemeProvider
    Theme="@Theme" />

@code
{
    private Skclusive.Core.Component.Theme Theme { set; get; } = Skclusive.Core.Component.Theme.Light;

    private IDisposable TimeoutDisposal { set; get; }

    protected override Task OnInitializedAsync()
    {
        DetectThemeHelper.OnChange += OnThemeChanged;

        TimeoutDisposal = ExecutionPlan.Delay(500, () => {
            _ = DetectThemeHelper.RegisterAsync();
        });

        return Task.CompletedTask;
    }

    protected void OnThemeChanged(object sender, Skclusive.Core.Component.Theme theme)
    {
        Theme = theme;

        StateHasChanged();
    }

    public void Dispose()
    {
        TimeoutDisposal?.Dispose();

        DetectThemeHelper.OnChange -= OnThemeChanged;

        _ = DetectThemeHelper.UnRegisterAsync();
    }
}